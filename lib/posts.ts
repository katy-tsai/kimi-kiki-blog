/**
 * Post Utility Functions (Contentlayer Version)
 *
 * Wrapper functions around Contentlayer-generated data.
 *
 * CRITICAL CHANGES from previous version:
 * - No more async/await (Contentlayer data is synchronous)
 * - Import from '@contentlayer/generated' instead of file system
 * - Type Post is auto-generated by Contentlayer
 * - No more manual parsing or markdown processing
 *
 * Reason: Simplified API with type safety and better DX
 */

import { allPosts, type Post } from '@contentlayer/generated'

/**
 * Get all posts from Contentlayer
 *
 * CRITICAL: No longer async - Contentlayer data is pre-generated
 *
 * @returns Array of all posts with processed content
 */
export function getAllPosts(): Post[] {
  return allPosts
}

/**
 * Get a single post by slug
 *
 * CRITICAL: Returns undefined (not null) when not found
 * CRITICAL: No longer async
 *
 * @param slug - Post slug (filename without .md extension)
 * @returns Single post or undefined if not found
 */
export function getPostBySlug(slug: string): Post | undefined {
  return allPosts.find((post) => post.slug === slug)
}

/**
 * Get all posts sorted by date (newest first)
 *
 * CRITICAL: No longer async
 *
 * @returns Array of posts sorted by date descending
 */
export function getSortedPosts(): Post[] {
  return allPosts.sort((a, b) => {
    // Reason: Contentlayer auto-parses dates to Date objects
    const dateA = new Date(a.date).getTime()
    const dateB = new Date(b.date).getTime()
    return dateB - dateA
  })
}

/**
 * Get all unique tags from all posts
 *
 * CRITICAL: No longer async
 *
 * @returns Array of unique tags sorted alphabetically
 */
export function getAllTags(): string[] {
  const posts = getAllPosts()
  const tags = posts.flatMap((post) => post.tags)

  // Reason: Return unique tags, sorted alphabetically
  return Array.from(new Set(tags)).sort()
}

/**
 * Get recommended posts (featured or first 3)
 *
 * UNCHANGED: Logic remains the same, just not async
 *
 * @param allPosts - Array of all posts
 * @returns Array of recommended posts (up to 3)
 */
export function getRecommendedPosts(allPosts: Post[]): Post[] {
  if (allPosts.length <= 3) {
    return allPosts
  }

  const recommendedPosts = allPosts.filter((post) => post.featured).slice(0, 3)

  const finalRecommendedPosts =
    recommendedPosts.length >= 3
      ? recommendedPosts
      : [...recommendedPosts, ...allPosts.slice(0, 3 - recommendedPosts.length)]

  return finalRecommendedPosts
}
